name: Build SnowClient DLL
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2.0.2
      with:
        cmake-version: 3.28
    - name: Install MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: |
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-openmp
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    - name: Build and Resolve function call ambiguity
      shell: powershell
      run: |
        # 构建项目
        cmake --build build --config Release > build.log 2>&1
        # 代码替换逻辑
        $source_file = "build_deps/directxtk-src/Audio/WAVFileReader.cpp"
        $temp_file = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), "WAVFileReader_temp.cpp")
        Set-Content -Path $temp_file -Value ""
        Get-Content -Path $source_file | ForEach-Object {
          $line = $_
          $new_line = $line -replace "safe_handle\(", "DirectX::safe_handle("
          Add-Content -Path $temp_file -Value $new_line
        }
        if (Test-Path $source_file) {
          Remove-Item $source_file -Force
        }
        Move-Item -Path $temp_file -Destination $source_file -Force
    - name: Check DLL Existence
      shell: powershell
      run: |
        if (-not (Test-Path "build\SnowClient.dll")) {
          Write-Host "SnowClient.dll not found in the build directory. Build may have failed."
          exit 1
        }
    - name: Set Version
      run: |
        echo "VERSION=v1.0.0" > $GITHUB_ENV
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: SnowClient DLL Release
        draft: false
        prerelease: false
    - name: Upload DLL to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/SnowClient.dll
        asset_name: SnowClient.dll
        asset_content_type: application/octet-stream
